# -*- coding: utf-8 -*-
"""Desafio DIO - Azure AI Fundamentals

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VTlG6Et-yehUb-t_i7VBKiXQ-vsIxFgR
"""

"""
==========================================
TRADUTOR DE ARTIGOS T√âCNICOS - AZURE AI
==========================================
Projeto: Desafio DIO - Azure AI Fundamentals
Autor: Agatha Lima


Descri√ß√£o:
Sistema de tradu√ß√£o autom√°tica de artigos t√©cnicos
utilizando Azure Cognitive Services - Translator API v3.0

Recursos:
- Detec√ß√£o autom√°tica de idioma
- Tradu√ß√£o para 100+ idiomas
- Upload de arquivos (PDF/TXT)
- Op√ß√µes avan√ßadas (alinhamento, an√°lise)

Configura√ß√£o:
1. Crie um recurso "Translator" no Azure
2. Copie a KEY e LOCATION
3. Configure na classe AzureTranslatorConfig
4. Execute o c√≥digo
==========================================
"""

# 1. INSTALA√á√ÉO DE DEPEND√äNCIAS
!pip install requests python-docx PyPDF2 -q

# 2. IMPORTS
import requests
import json
from google.colab import files
import io

# 3. CONFIGURA√á√ÉO DO AZURE
class AzureTranslatorConfig:
    """
    Credenciais do recurso Azure Translator
    Recurso: tradutor-artigos-tecnicos-brs
    Regi√£o: Brazil South
    Tipo: Gratuito (2M caracteres/m√™s)
    """
    SUBSCRIPTION_KEY = "COLE_SUA_CHAVE_AQUI"
    ENDPOINT = "https://api.cognitive.microsofttranslator.com"
    LOCATION = "brazilsouth"
    API_VERSION = "3.0"

# 4. CLASSE DO TRADUTOR
class TradutorAzure:
    """
    Classe principal para tradu√ß√£o de textos usando Azure Translator
    """

    def __init__(self, config):
        self.config = config
        self.headers = {
            'Ocp-Apim-Subscription-Key': config.SUBSCRIPTION_KEY,
            'Ocp-Apim-Subscription-Region': config.LOCATION,
            'Content-type': 'application/json'
        }

    def detectar_idioma(self, texto):
        """
        Detecta o idioma do texto
        """
        url = f"{self.config.ENDPOINT}/detect?api-version={self.config.API_VERSION}"
        body = [{'text': texto[:1000]}]  # Usa os primeiros 1000 caracteres

        try:
            response = requests.post(url, headers=self.headers, json=body)
            response.raise_for_status()
            result = response.json()
            return result[0]['language']
        except Exception as e:
            print(f"Erro ao detectar idioma: {e}")
            return None

    def traduzir(self, texto, idioma_destino='pt', idioma_origem=None,
                 incluir_alinhamento=False, incluir_comprimento_frase=False,
                 filtro_profanidade=False):
        """
        Traduz o texto para o idioma de destino

        Par√¢metros:
        - texto: Texto a ser traduzido
        - idioma_destino: C√≥digo do idioma de destino (ex: 'pt', 'en', 'es')
        - idioma_origem: C√≥digo do idioma de origem (None para detec√ß√£o autom√°tica)
        - incluir_alinhamento: Retorna alinhamento de palavras
        - incluir_comprimento_frase: Retorna comprimento das frases
        - filtro_profanidade: Marca palavras ofensivas
        """

        # Construir URL
        params = f"api-version={self.config.API_VERSION}&to={idioma_destino}"
        if idioma_origem:
            params += f"&from={idioma_origem}"
        if incluir_alinhamento:
            params += "&includeAlignment=true"
        if incluir_comprimento_frase:
            params += "&includeSentenceLength=true"
        if filtro_profanidade:
            params += "&profanityAction=Marked"

        url = f"{self.config.ENDPOINT}/translate?{params}"

        # Dividir texto em chunks se for muito grande (max 50k caracteres)
        max_chunk_size = 10000
        if len(texto) > max_chunk_size:
            return self._traduzir_texto_longo(texto, url, max_chunk_size)

        # Traduzir
        body = [{'text': texto}]

        try:
            response = requests.post(url, headers=self.headers, json=body)
            response.raise_for_status()
            result = response.json()
            return result[0]['translations'][0]
        except Exception as e:
            print(f"Erro na tradu√ß√£o: {e}")
            if hasattr(e, 'response'):
                print(f"Detalhes: {e.response.text}")
            return None

    def _traduzir_texto_longo(self, texto, url, chunk_size):
        """
        Traduz textos longos dividindo em partes
        """
        paragrafos = texto.split('\n\n')
        traducao_completa = []

        chunk_atual = ""
        for paragrafo in paragrafos:
            if len(chunk_atual) + len(paragrafo) < chunk_size:
                chunk_atual += paragrafo + "\n\n"
            else:
                # Traduzir chunk atual
                if chunk_atual:
                    body = [{'text': chunk_atual}]
                    response = requests.post(url, headers=self.headers, json=body)
                    result = response.json()
                    traducao_completa.append(result[0]['translations'][0]['text'])

                chunk_atual = paragrafo + "\n\n"

        # Traduzir √∫ltimo chunk
        if chunk_atual:
            body = [{'text': chunk_atual}]
            response = requests.post(url, headers=self.headers, json=body)
            result = response.json()
            traducao_completa.append(result[0]['translations'][0]['text'])

        return {'text': '\n\n'.join(traducao_completa)}

    def traduzir_com_personalizacao(self, texto, categoria_id,
                                    idioma_destino='pt', idioma_origem=None):
        """
        Traduz usando um modelo personalizado (Custom Translator)

        Par√¢metros:
        - categoria_id: ID da categoria do modelo personalizado
        """
        params = f"api-version={self.config.API_VERSION}&to={idioma_destino}&category={categoria_id}"
        if idioma_origem:
            params += f"&from={idioma_origem}"

        url = f"{self.config.ENDPOINT}/translate?{params}"
        body = [{'text': texto}]

        try:
            response = requests.post(url, headers=self.headers, json=body)
            response.raise_for_status()
            result = response.json()
            return result[0]['translations'][0]
        except Exception as e:
            print(f"Erro na tradu√ß√£o personalizada: {e}")
            return None

    def transliterar(self, texto, idioma, script_origem, script_destino):
        """
        Converte texto de um script para outro (ex: 'Latn' para 'Jpan')
        """
        url = f"{self.config.ENDPOINT}/transliterate?api-version={self.config.API_VERSION}&language={idioma}&fromScript={script_origem}&toScript={script_destino}"
        body = [{'text': texto}]

        try:
            response = requests.post(url, headers=self.headers, json=body)
            response.raise_for_status()
            result = response.json()
            return result[0]
        except Exception as e:
            print(f"Erro na translitera√ß√£o: {e}")
            return None

# 5. FUN√á√ïES AUXILIARES
def processar_arquivo_texto(caminho_arquivo):
    """
    L√™ arquivo de texto
    """
    try:
        with open(caminho_arquivo, 'r', encoding='utf-8') as f:
            return f.read()
    except:
        with open(caminho_arquivo, 'r', encoding='latin-1') as f:
            return f.read()

def processar_arquivo_pdf(caminho_arquivo):
    """
    Extrai texto de PDF
    """
    try:
        import PyPDF2
        texto_completo = []
        with open(caminho_arquivo, 'rb') as f:
            pdf_reader = PyPDF2.PdfReader(f)
            for pagina in pdf_reader.pages:
                texto_completo.append(pagina.extract_text())
        return '\n\n'.join(texto_completo)
    except Exception as e:
        print(f"Erro ao ler PDF: {e}")
        return None

def salvar_resultado(texto_original, texto_traduzido, idioma_origem, idioma_destino):
    """
    Salva resultado em arquivo
    """
    resultado = f"""
========================================
TRADU√á√ÉO DE ARTIGO T√âCNICO
========================================

Idioma de origem: {idioma_origem.upper()}
Idioma de destino: {idioma_destino.upper()}

--- TEXTO ORIGINAL ---
{texto_original}

--- TEXTO TRADUZIDO ---
{texto_traduzido}

========================================
"""

    with open('traducao_resultado.txt', 'w', encoding='utf-8') as f:
        f.write(resultado)

    print("\n‚úÖ Arquivo 'traducao_resultado.txt' criado com sucesso!")
    files.download('traducao_resultado.txt')

# 6. FUN√á√ÉO PRINCIPAL
def main():
    """
    Fun√ß√£o principal do programa
    """
    print("="*60)
    print("TRADUTOR DE ARTIGOS T√âCNICOS - AZURE AI")
    print("="*60)

    # Verificar configura√ß√£o
    if AzureTranslatorConfig.SUBSCRIPTION_KEY == "SUA_CHAVE_AQUI":
        print("\n‚ö†Ô∏è  ATEN√á√ÉO: Configure suas credenciais do Azure!")
        print("   Edite a classe 'AzureTranslatorConfig' no c√≥digo.")
        return

    # Inicializar tradutor
    tradutor = TradutorAzure(AzureTranslatorConfig)

    # Menu de op√ß√µes
    print("\nEscolha uma op√ß√£o:")
    print("1 - Traduzir texto direto")
    print("2 - Upload de arquivo (.txt, .pdf)")
    print("3 - Traduzir com op√ß√µes avan√ßadas")

    opcao = input("\nDigite o n√∫mero da op√ß√£o: ").strip()

    if opcao == "1":
        # Tradu√ß√£o direta
        print("\n--- TRADU√á√ÉO DIRETA ---")
        texto = input("\nCole o texto a ser traduzido:\n")

        # Detectar idioma
        print("\nüîç Detectando idioma...")
        idioma_origem = tradutor.detectar_idioma(texto)
        print(f"   Idioma detectado: {idioma_origem}")

        # Idioma de destino
        idioma_destino = input("\nIdioma de destino (ex: pt, en, es, fr): ").strip() or 'pt'

        # Traduzir
        print("\nüåê Traduzindo...")
        resultado = tradutor.traduzir(texto, idioma_destino, idioma_origem)

        if resultado:
            print("\n‚úÖ TRADU√á√ÉO CONCLU√çDA!")
            print("\n" + "="*60)
            print(resultado['text'])
            print("="*60)

            # Salvar
            salvar = input("\nüíæ Deseja salvar o resultado? (s/n): ").strip().lower()
            if salvar == 's':
                salvar_resultado(texto, resultado['text'], idioma_origem, idioma_destino)

    elif opcao == "2":
        # Upload de arquivo
        print("\n--- UPLOAD DE ARQUIVO ---")
        print("Fa√ßa upload do arquivo...")
        uploaded = files.upload()

        if uploaded:
            filename = list(uploaded.keys())[0]
            print(f"\nüìÑ Arquivo recebido: {filename}")

            # Processar arquivo
            if filename.endswith('.pdf'):
                texto = processar_arquivo_pdf(filename)
            else:
                texto = processar_arquivo_texto(filename)

            if texto:
                print(f"\n‚úÖ Texto extra√≠do: {len(texto)} caracteres")
                print(f"   Pr√©via: {texto[:200]}...")

                # Detectar idioma
                print("\nüîç Detectando idioma...")
                idioma_origem = tradutor.detectar_idioma(texto)
                print(f"   Idioma detectado: {idioma_origem}")

                # Idioma de destino
                idioma_destino = input("\nIdioma de destino (ex: pt, en, es, fr): ").strip() or 'pt'

                # Traduzir
                print("\nüåê Traduzindo... (isso pode levar alguns segundos)")
                resultado = tradutor.traduzir(texto, idioma_destino, idioma_origem)

                if resultado:
                    print("\n‚úÖ TRADU√á√ÉO CONCLU√çDA!")
                    salvar_resultado(texto, resultado['text'], idioma_origem, idioma_destino)

    elif opcao == "3":
        # Op√ß√µes avan√ßadas
        print("\n--- TRADU√á√ÉO COM OP√á√ïES AVAN√áADAS ---")
        texto = input("\nCole o texto a ser traduzido:\n")

        idioma_origem = input("\nIdioma de origem (deixe vazio para auto-detectar): ").strip() or None
        idioma_destino = input("Idioma de destino (ex: pt, en, es, fr): ").strip() or 'pt'

        alinhamento = input("Incluir alinhamento de palavras? (s/n): ").strip().lower() == 's'
        comprimento = input("Incluir comprimento de frases? (s/n): ").strip().lower() == 's'
        filtro = input("Filtrar conte√∫do ofensivo? (s/n): ").strip().lower() == 's'

        print("\nüåê Traduzindo...")
        resultado = tradutor.traduzir(
            texto, idioma_destino, idioma_origem,
            incluir_alinhamento=alinhamento,
            incluir_comprimento_frase=comprimento,
            filtro_profanidade=filtro
        )

        if resultado:
            print("\n‚úÖ TRADU√á√ÉO CONCLU√çDA!")
            print("\n" + "="*60)
            print(resultado['text'])
            print("="*60)

            if alinhamento and 'alignment' in resultado:
                print(f"\nüìä Alinhamento: {resultado['alignment']}")

            if comprimento and 'sentLen' in resultado:
                print(f"\nüìè Comprimentos: {resultado['sentLen']}")

    print("\n\nüéâ Obrigado por usar o Tradutor de Artigos T√©cnicos!")

# 7. EXECUTAR PROGRAMA
if __name__ == "__main__":
    main()